package com.packt.akka

import akka.actor.{ Actor, ActorRef, ActorLogging, ActorSystem, Props, OneForOneStrategy }
import akka.pattern.ask
import akka.util.Timeout

import com.typesafe.config.ConfigFactory

import scala.concurrent.duration._
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global

object Mailer extends App {
  implicit val timeout = Timeout(5 seconds)
  val config = ConfigFactory.load
  val system = ActorSystem("Mailer", config)

  val mailer = system.actorOf(Props[Mailer], "mailer")
  val responsesFutures =
    for (i <- 1 to 10) yield mailer ? s"email #$i"

  Future.sequence(responsesFutures).map(_ => println("All messages have been sent"))

  Thread.sleep(10000)
  system.shutdown()
}

class Mailer extends Actor with ActorLogging {
  def receive = {
    case msg: String =>
      context.actorOf(Props[MailerWorker]).forward(msg)
  }
}

class MailerWorker extends Actor with ActorLogging {
  def receive = {
    case msg: String =>
      sendSynchronousEmail(msg)
      sender ! "sent"
  }

  def sendSynchronousEmail(msg: String) = {
      Thread.sleep(300)
      log.info(msg)
  }
}
